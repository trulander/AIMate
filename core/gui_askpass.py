#!/usr/bin/env python3
import getpass
import tkinter as tk
from tkinter import ttk
import sys
import webbrowser

class AuthDialog:
    def __init__(self):
        self.password = None
        self.details_visible = False

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root = tk.Tk()
        self.root.title("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        self.root.attributes("-topmost", True)
        self.root.resizable(False, False)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ –¥–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.root.transient()
        self.root.grab_set()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
        self.setup_styles()

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
        self.center_window()

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        self.bind_events()

    def center_window(self):
        self.root.update_idletasks()
        width = self.root.winfo_reqwidth()
        height = self.root.winfo_reqheight()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")

    def setup_styles(self):
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –≤ —Å—Ç–∏–ª–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        self.root.configure(bg='#f0f0f0')

        style = ttk.Style()
        style.theme_use('clam')

    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg='#f0f0f0', padx=20, pady=15)
        main_frame.pack(fill='both', expand=True)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
        top_frame = tk.Frame(main_frame, bg='#f0f0f0')
        top_frame.pack(fill='x', pady=(0, 15))

        # –ò–∫–æ–Ω–∫–∞ –∑–∞–º–∫–∞ (—ç–º—É–ª—è—Ü–∏—è)
        icon_frame = tk.Frame(top_frame, bg='#f0f0f0', width=48, height=48)
        icon_frame.pack(side='left', padx=(0, 15))
        icon_frame.pack_propagate(False)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞
        canvas = tk.Canvas(icon_frame, width=48, height=48, bg='#f0f0f0', highlightthickness=0)
        canvas.pack()

        # –†–∏—Å—É–µ–º –∑–∞–º–æ–∫
        canvas.create_rectangle(16, 20, 32, 35, outline='#333', width=2, fill='#ddd')
        canvas.create_arc(18, 12, 30, 24, start=0, extent=180, outline='#333', width=2, style='arc')
        canvas.create_oval(22, 26, 26, 30, fill='#333')
        canvas.create_rectangle(23, 28, 25, 32, fill='#333')

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å
        text_frame = tk.Frame(top_frame, bg='#f0f0f0')
        text_frame.pack(side='left', fill='both', expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            text_frame,
            text="Authentication is needed to run '/bin/bash' as the super user",
            font=('Sans', 11, 'bold'),
            bg='#f0f0f0',
            fg='#333',
            anchor='w'
        )
        title_label.pack(fill='x')
        user = getpass.getuser()
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle_label = tk.Label(
            text_frame,
            text=f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} ({user})",
            font=('Sans', 9),
            bg='#f0f0f0',
            fg='#666',
            anchor='w'
        )
        subtitle_label.pack(fill='x', pady=(5, 0))

        # –§—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        password_frame = tk.Frame(main_frame, bg='#f0f0f0')
        password_frame.pack(fill='x', pady=(0, 15))

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        self.password_entry = tk.Entry(
            password_frame,
            font=('Sans', 10),
            show='*',
            width=40,
            relief='solid',
            borderwidth=1
        )
        self.password_entry.pack(side='left', fill='x', expand=True)
        self.password_entry.insert(0, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...")
        self.password_entry.configure(fg='#999')

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å
        self.show_password_var = tk.BooleanVar()
        self.show_btn = tk.Button(
            password_frame,
            text="üëÅ",
            width=3,
            command=self.toggle_password_visibility,
            relief='solid',
            borderwidth=1,
            bg='white'
        )
        self.show_btn.pack(side='right', padx=(5, 0))

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = tk.Frame(main_frame, bg='#f0f0f0')
        button_frame.pack(fill='x')

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è"
        self.details_btn = tk.Button(
            button_frame,
            text="‚ìò –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è",
            command=self.toggle_details,
            relief='flat',
            bg='#f0f0f0',
            fg='#0066cc',
            font=('Sans', 9),
            cursor='hand2',
            anchor='w'
        )
        self.details_btn.pack(side='left')

        # –ü—Ä–∞–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        right_buttons = tk.Frame(button_frame, bg='#f0f0f0')
        right_buttons.pack(side='right')

        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        cancel_btn = tk.Button(
            right_buttons,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.cancel,
            width=10,
            relief="solid",
            borderwidth=1,
            bg="white",
            font=("Sans", 9, "bold"),
        )
        cancel_btn.pack(side='right', padx=(5, 0))

        # –ö–Ω–æ–ø–∫–∞ "OK"
        ok_btn = tk.Button(
            right_buttons,
            text="OK",
            command=self.ok,
            width=10,
            relief='solid',
            borderwidth=1,
            bg='#e3f2fd',
            fg='#1976d2',
            font=('Sans', 9, 'bold')
        )
        ok_btn.pack(side='right')

        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.details_frame = tk.Frame(main_frame, bg='#f9f9f9', relief='solid', borderwidth=1)

        self.details_text = tk.Text(
            self.details_frame,
            height=9,
            wrap='word',
            bg='#f9f9f9',
            fg='#333',
            font=('Sans', 9),
            relief='flat',
            padx=10,
            pady=10,
            cursor='arrow'
        )
        self.details_text.pack(fill='both', expand=True, padx=5, pady=5)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥ –¥–ª—è —Å—Å—ã–ª–æ–∫
        self.details_text.tag_configure("link", foreground="#0066cc", underline=True)
        self.details_text.tag_bind("link", "<Button-1>", self.open_link)
        self.details_text.tag_bind("link", "<Enter>", lambda e: self.details_text.configure(cursor="hand2"))
        self.details_text.tag_bind("link", "<Leave>", lambda e: self.details_text.configure(cursor="arrow"))

        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —Å —Å—Å—ã–ª–∫–æ–π
        details_content = """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 'AIMate' –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞. –î–ª—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ keyboard —Ç—Ä–µ–±—É—é—Ç—Å—è root –ø—Ä–∞–≤, –±–µ–∑ –Ω–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –±—É–¥–µ—Ç –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ.

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ """

        link_text = "pypi.org/project/keyboard/"
        link_url = "https://pypi.org/project/keyboard/"

        end_content = "."

        self.details_text.insert('1.0', details_content)

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        link_start = self.details_text.index('end-1c')
        self.details_text.insert('end', link_text)
        link_end = self.details_text.index('end-1c')
        self.details_text.tag_add("link", link_start, link_end)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è —Å—Å—ã–ª–∫–∏
        self.details_text.tag_add(link_url, link_start, link_end)

        self.details_text.insert('end', end_content)
        self.details_text.configure(state='disabled')

    def bind_events(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –¥–ª—è placeholder
        self.password_entry.bind('<FocusIn>', self.on_entry_focus_in)
        self.password_entry.bind('<FocusOut>', self.on_entry_focus_out)

        # Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.root.bind('<Return>', lambda e: self.ok())
        self.root.bind('<Escape>', lambda e: self.cancel())

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.password_entry.focus_set()

    def on_entry_focus_in(self, event):
        if self.password_entry.get() == "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å..." and self.password_entry.cget('fg') == '#999':
            self.password_entry.delete(0, 'end')
            self.password_entry.configure(fg='black')

    def on_entry_focus_out(self, event):
        if not self.password_entry.get():
            self.password_entry.insert(0, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...")
            self.password_entry.configure(fg='#999')

    def toggle_password_visibility(self):
        if self.show_password_var.get():
            self.password_entry.configure(show='')
            self.show_btn.configure(text="üôà")
            self.show_password_var.set(False)
        else:
            self.password_entry.configure(show='*')
            self.show_btn.configure(text="üëÅ")
            self.show_password_var.set(True)

    def toggle_details(self):
        if self.details_visible:
            self.details_frame.pack_forget()
            self.details_visible = False
        else:
            self.details_frame.pack(fill='x', pady=(10, 0))
            self.details_visible = True

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        self.root.update_idletasks()
        self.center_window()

    def open_link(self, event):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–ª–∏–∫–∞
        index = self.details_text.index("@%s,%s" % (event.x, event.y))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        tags = self.details_text.tag_names(index)

        # –ò—â–µ–º —Ç–µ–≥ —Å URL (–∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http)
        for tag in tags:
            if tag.startswith('http'):
                webbrowser.open(tag)
                break

    def ok(self):
        password = self.password_entry.get()
        if password and password != "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...":
            self.password = password
            self.root.quit()

    def cancel(self):
        self.password = None
        self.root.quit()

    def show(self):
        self.root.mainloop()
        return self.password

if __name__ == "__main__":
    dialog = AuthDialog()
    password = dialog.show()

    if password:
        print(password)
    else:
        sys.exit(1)