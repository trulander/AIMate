import logging
import multiprocessing
import queue
import threading
import time
from collections import deque

import numpy as np
import sounddevice as sd
from scipy import signal

from business_logic.audio_speach_recognition.speach_recognizer import SpeechRecognizer
from business_logic.hot_key_handler_service import HotkeyHandlerService


logger = logging.getLogger(__name__)


class RealTimeASR:
    def __init__(self,
                 target_sample_rate=16000,
                 block_size=1024,
                 hotkey: list=[],
                 hot_key_handler_service: HotkeyHandlerService = None,
                 queue_recognised_text: multiprocessing.Queue = None,
                 speech_recognizer: SpeechRecognizer = None,):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏

        Args:
            target_sample_rate: —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
            block_size: —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –∞—É–¥–∏–æ
            hotkey: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        self.__target_sample_rate = target_sample_rate
        self.__block_size = block_size
        self.__audio_queue = queue.Queue()
        self.__queue_recognised_text: multiprocessing.Queue = queue_recognised_text
        self.__running: multiprocessing.Event = None
        self.__hotkey = hotkey

        self.__hot_key_handler_service = hot_key_handler_service

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        self.__device_sample_rate = self.__find_supported_sample_rate()
        logger.info(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: {self.__device_sample_rate} Hz")
        logger.info(f"–ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç: {self.__target_sample_rate} Hz")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏
        self.__speech_recognizer: SpeechRecognizer = speech_recognizer

        # –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.__audio_buffer = deque()

        # –ë—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        self.__speech_buffer = []
        self.__recording_speech = False

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.__manual_recording = False
        self.__manual_start_time = None

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–∞
        if self.__device_sample_rate != self.__target_sample_rate:
            self.__need_resample = True
            self.__resample_ratio = self.__target_sample_rate / self.__device_sample_rate
            logger.warning(f"–ë—É–¥–µ–º —Ä–µ—Å—ç–º–ø–ª–∏—Ä–æ–≤–∞—Ç—å —Å {self.__device_sample_rate} Hz –¥–æ {self.__target_sample_rate} Hz")
        else:
            self.__need_resample = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.__min_speech_length = int(0.3 * target_sample_rate)  # –º–∏–Ω–∏–º—É–º 0.3 —Å–µ–∫—É–Ω–¥—ã
        self.__max_speech_length = int(60 * target_sample_rate)  # –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.__setup_hotkeys()


    def start(self, stop_event):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.__running = stop_event

        processing_thread = threading.Thread(target=self.__process_audio)
        processing_thread.daemon = True
        processing_thread.start()

        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.__device_sample_rate} Hz ‚Üí –º–æ–¥–µ–ª—å: {self.__target_sample_rate} Hz)")

        try:
            with sd.InputStream(
                    channels=1,
                    samplerate=self.__device_sample_rate,
                    blocksize=self.__block_size,
                    callback=self.__audio_callback,
                    dtype=np.float32
            ):
                while not (self.__running and self.__running.is_set()):
                    time.sleep(0.1)

        except KeyboardInterrupt:
            logger.info("\n–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å...")
        finally:
            self.stop()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            self.__running.set()
        except:
            pass
        logger.info("–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


    def __setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        logger.info(f"setup_hotkeys")
        try:
            self.__hot_key_handler_service.add_hotkey(
                hotkey=self.__hotkey,
                on_press_callback=self.__on_hotkey_press,
                on_release_callback=self.__on_hotkey_release
            )
            logger.info(f"–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {self.__hotkey}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {e}")
            logger.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º")

    def __on_hotkey_press(self, *args, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏"""
        if not self.__manual_recording:
            self.__manual_recording = True
            self.__manual_start_time = time.time()
            self.__speech_buffer = []
            logger.info(f"üé§ –†–£–ß–ù–ê–Ø –ó–ê–ü–ò–°–¨ –ù–ê–ß–ê–õ–ê–°–¨ (–Ω–∞–∂–∞—Ç–∞ {self.__hotkey})")

    def __on_hotkey_release(self, *args, **kwargs):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏"""
        if self.__manual_recording:
            self.__manual_recording = False
            duration = time.time() - self.__manual_start_time if self.__manual_start_time else 0
            logger.info(f"üîá –†–£–ß–ù–ê–Ø –ó–ê–ü–ò–°–¨ –û–°–¢–ê–ù–û–í–õ–ï–ù–ê (–æ—Ç–ø—É—â–µ–Ω–∞ {self.__hotkey}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å)")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            if len(self.__speech_buffer) > 0:
                recognition_thread = threading.Thread(
                    target=self.__process_speech_segment,
                    daemon=True
                )
                recognition_thread.start()

    def __find_supported_sample_rate(self):
        """–ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        sample_rates = [16000, 44100, 48000, 22050, 8000]

        try:
            default_device = sd.default.device[0]
            device_info = sd.query_devices(default_device)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_info['name']}")
        except:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            default_device = None

        for sr in sample_rates:
            try:
                sd.check_input_settings(
                    device=default_device,
                    channels=1,
                    samplerate=sr,
                    dtype=np.float32
                )
                return sr
            except:
                continue

        try:
            device_info = sd.query_devices(default_device)
            return int(device_info['default_samplerate'])
        except:

            return 44100

    def __resample_audio(self, audio_data):
        """–†–µ—Å—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –¥–æ —Ü–µ–ª–µ–≤–æ–π —á–∞—Å—Ç–æ—Ç—ã"""
        if not self.__need_resample:
            return audio_data

        original_length = len(audio_data)
        target_length = int(original_length * self.__resample_ratio)

        if target_length == 0:
            return np.array([], dtype=np.float32)

        try:
            resampled = signal.resample(audio_data, target_length)
            return resampled.astype(np.float32)
        except:
            indices = np.linspace(0, original_length - 1, target_length)
            resampled = np.interp(indices, np.arange(original_length), audio_data)
            return resampled.astype(np.float32)

    def __process_speech_segment(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—á–µ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞"""
        if len(self.__speech_buffer) < self.__min_speech_length:
            logger.warning("–°–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
            return

        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á–µ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç ({len(self.__speech_buffer) / self.__target_sample_rate:.1f}s)...")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
        speech_array = np.array(self.__speech_buffer, dtype=np.float32)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        text, language, confidence = self.__speech_recognizer.transcribe_audio(speech_array)

        if text:
            logger.info(f"üéØ –†–ê–°–ü–û–ó–ù–ê–ù–û [{language.upper()}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}]:")
            logger.info(f"{text}")
            self.__queue_recognised_text.put(text)
        else:
            logger.warning("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —à—É–º\n")

    def __process_audio(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω...")

        while not (self.__running and self.__running.is_set()):
            try:
                audio_chunk = self.__audio_queue.get(timeout=1.0)

                if self.__need_resample:
                    audio_chunk = self.__resample_audio(audio_chunk)

                self.__audio_buffer.extend(audio_chunk)

                while len(self.__audio_buffer) >= 512:
                    chunk_data = np.array([self.__audio_buffer.popleft() for _ in range(512)])

                    if self.__manual_recording:
                        self.__speech_buffer.extend(chunk_data)
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                        if len(self.__speech_buffer) > self.__max_speech_length:
                            self.__speech_buffer = self.__speech_buffer[-self.__max_speech_length:]

            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω...")

    def __audio_callback(self, indata, frames, time, status):
        """Callback –¥–ª—è sounddevice"""
        if status:
            logger.info(f"–ê—É–¥–∏–æ —Å—Ç–∞—Ç—É—Å: {status}")

        if len(indata.shape) > 1:
            audio_data = indata[:, 0]
        else:
            audio_data = indata.flatten()

        self.__audio_queue.put(audio_data.copy())

